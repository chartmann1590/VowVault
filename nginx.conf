events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # File upload size
    client_max_body_size 20M;

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css text/javascript application/javascript application/json;
    gzip_min_length 1000;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self'; connect-src 'self'; frame-ancestors 'self';" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=login:10m rate=3r/m;

    # Upstream Flask app
    upstream flask_app {
        server wedding-gallery:5000;
    }

    # HTTP server - redirect to HTTPS in production
    server {
        listen 80;
        server_name your-domain.com;

        # For Let's Encrypt verification
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect to HTTPS (uncomment in production)
        # return 301 https://$server_name$request_uri;

        # Rate limiting for uploads
        location /upload {
            limit_req zone=upload burst=3 nodelay;
            proxy_pass http://flask_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Rate limiting for API endpoints
        location /api/ {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://flask_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Rate limiting for admin access
        location /admin {
            limit_req zone=login burst=2 nodelay;
            proxy_pass http://flask_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy to Flask app
        location / {
            proxy_pass http://flask_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Serve uploaded files directly with security headers
        location /static/uploads/ {
            alias /app/static/uploads/;
            expires 7d;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options "nosniff" always;
            
            # Only allow image and video files
            location ~* \.(jpg|jpeg|png|gif|webp|mp4|mov|avi|webm)$ {
                # Allow access
            }
            
            # Block all other file types
            location ~* \. {
                deny all;
                return 403;
            }
        }

        # Block access to sensitive files
        location ~ /\. {
            deny all;
            return 403;
        }

        location ~ \.(sqlite|db|log|ini|conf)$ {
            deny all;
            return 403;
        }
    }

    # HTTPS server (uncomment and configure in production)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;

    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;

    #     # Rate limiting for uploads
    #     location /upload {
    #         limit_req zone=upload burst=3 nodelay;
    #         proxy_pass http://flask_app;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     # Rate limiting for API endpoints
    #     location /api/ {
    #         limit_req zone=api burst=5 nodelay;
    #         proxy_pass http://flask_app;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     # Rate limiting for admin access
    #     location /admin {
    #         limit_req zone=login burst=2 nodelay;
    #         proxy_pass http://flask_app;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     location / {
    #         proxy_pass http://flask_app;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     location /static/uploads/ {
    #         alias /app/static/uploads/;
    #         expires 7d;
    #         add_header Cache-Control "public, immutable";
    #         add_header X-Content-Type-Options "nosniff" always;
            
    #         # Only allow image and video files
    #         location ~* \.(jpg|jpeg|png|gif|webp|mp4|mov|avi|webm)$ {
    #             # Allow access
    #         }
            
    #         # Block all other file types
    #         location ~* \. {
    #             deny all;
    #             return 403;
    #         }
    #     }

    #     # Block access to sensitive files
    #     location ~ /\. {
    #         deny all;
    #         return 403;
    #     }

    #     location ~ \.(sqlite|db|log|ini|conf)$ {
    #         deny all;
    #         return 403;
    #     }
    # }
}